package com.appyuken.frikiados.menu;

import java.util.HashMap;
import java.util.List;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.view.Menu;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.appyuken.frikiados.Frikiados;
import com.appyuken.frikiados.R;
import com.appyuken.frikiados.classes.ResultGetScore;
import com.appyuken.frikiados.classes.Score;
import com.appyuken.frikiados.classes.SessionManager;
import com.appyuken.frikiados.service.RestfulWebService;
import com.google.android.gms.ads.AdRequest;
import com.google.android.gms.ads.InterstitialAd;
import com.google.android.gms.analytics.GoogleAnalytics;

public class RankingActivity extends Activity {
	ResultGetScore resultGetSocres;
	private ProgressDialog dialog = null;
	private List<Score> listOfBestScores;
	private AccountAdapter scoresAdapter;
	private ListView listView;
	private static final String AD_UNIT_ID = "ca-app-pub-9585973118353015/9578664681";
	private InterstitialAd interstitial;
	private SessionManager sessionManager;
	private int resultScore;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_ranking);

		((Frikiados) getApplication()).getTracker(Frikiados.TrackerName.APP_TRACKER);
		// Set screen name.
		GoogleAnalytics.getInstance(this).reportActivityStart(this);
		
		sessionManager = new SessionManager(getApplicationContext());
		
		interstitial = new InterstitialAd(this);
		interstitial.setAdUnitId(AD_UNIT_ID);

		// Iniciar una solicitud genérica.
		AdRequest adRequest = new AdRequest.Builder().build();
		interstitial.loadAd(adRequest);

		listView = (ListView) findViewById(R.id.frkiadosRanking);
		System.out.println("Puntuación pendiente enviada: " + sessionManager.isBestScoreSendToServer());
		if(!sessionManager.isBestScoreSendToServer()&& sessionManager.isLoggedInFacebook()){
			if(sessionManager.getBestScore()>0)
			new UpdateScore().execute();
		}
		if(!sessionManager.isLoggedInFacebook()){
			showAlertFacebook();
		}
		
		new RefreshScores().execute();
	}

	private void showAlertFacebook() {
		// TODO Auto-generated method stub
		AlertDialog.Builder builder1 = new AlertDialog.Builder(this);
		builder1.setTitle("Frikiados");
        builder1.setMessage("Vincula tu cuenta con Facebook para que tu puntuación quede registrada!!! ");
        builder1.setCancelable(true);
        builder1.setPositiveButton("Si",
                new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int id) {
            	Intent profileActivity = new Intent(getBaseContext(),
						ProfileActivity.class);
				startActivity(profileActivity);
            	finish();
                dialog.cancel();
            }
        });
        builder1.setNegativeButton("No",
                new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int id) {
                dialog.cancel();
            }
        });

        AlertDialog alert11 = builder1.create();
        alert11.show();
	}

	class AccountAdapter extends ArrayAdapter<Score> {

		Context context;

		AccountAdapter(Context context, int resource, List<Score> objects) {
			super(context, resource, objects);
			this.context = context;
		}

		@SuppressLint("ViewHolder")
		public View getView(final int position, View convertView,
				ViewGroup parent) {
			View row = View.inflate(context, R.layout.user_ranking_frikiados,
					null);

			// Recorrremos la lista de lidins para crear las filas del ListView
			if (position < listOfBestScores.size()) {
				// Procedemos a recuperar y mostrar todos los datos
				// pertenecientes al Lidin
				final TextView frikiadosNickName = (TextView) row
						.findViewById(R.id.frkiadosNickname);
				final TextView frikiadosUserScore = (TextView) row
						.findViewById(R.id.frikiadosPoints);
				final TextView frikiadosUserAnswerScore = (TextView) row
						.findViewById(R.id.frkiadosAnswer);
				final ImageView frikiadosImageRanking = (ImageView)row.findViewById(R.id.iconRanking);

				frikiadosNickName.setText(listOfBestScores.get(position)
						.getUserNickname());
				frikiadosUserScore.setText(listOfBestScores.get(position)
						.getUserScore());
				frikiadosUserAnswerScore.setText(listOfBestScores.get(position)
						.getUserAnswerScore());
				
				if(position==0){
					frikiadosImageRanking.setBackgroundResource(R.drawable.trofeo_oro);
				}else if(position==1){
					frikiadosImageRanking.setBackgroundResource(R.drawable.trofeo_plata);
				}else if(position==2){
					frikiadosImageRanking.setBackgroundResource(R.drawable.trofeo_bronce);
				}else{
					frikiadosImageRanking.setBackgroundResource(R.drawable.foto_perfil);
				}

			}
			return (row);
		}
	}

	public class RefreshScores extends AsyncTask<Void, String, Void> {

		@Override
		protected void onPreExecute() {
			dialog = new ProgressDialog(RankingActivity.this);
			dialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
			dialog.setCancelable(false);
			dialog.setMessage("Cargando Ranking! Por favor espere unos segundos...!");
			dialog.show();

		}

		@Override
		protected Void doInBackground(Void... unused) {
			resultGetSocres = RestfulWebService
					.getFrikiadosRanking(getApplicationContext());
			return (null);
		}

		@Override
		protected void onPostExecute(Void unused) {

			if (resultGetSocres != null) {
				switch (resultGetSocres.getError()) {
				case 0:
					// NO HAY ERROR
					try {
						dialog.dismiss();
						dialog = null;
						printScores(resultGetSocres);
						final Handler handler = new Handler();
						handler.postDelayed(new Runnable() {
							@Override
							public void run() {
								// Do something after 100ms
								displayInterstitial();
							}
						}, 1000);
						// goToTarget = false;
					} catch (Exception e) {
						// nothing
					}
					break;

				case 1:
					try {
						dialog.dismiss();
						dialog = null;
						showAlertDialogError();
						// goToTarget = false;
					} catch (Exception e) {
						// nothing
					}
					// ERROR WEBSERVICE
					System.out.println("Error WebService");
					break;

				case 2:
					// ERROREXCEPTION
					try {
						dialog.dismiss();
						dialog = null;
						showAlertDialogError();
						// goToTarget = false;
					} catch (Exception e) {
						// nothing
					}
					System.out.println("Error Exception");

					break;

				default:
					break;
				}
			}
		}

	}

	private void printScores(ResultGetScore resultGetSocres) {
		// TODO Auto-generated method stub

		if (resultGetSocres != null) {
			listOfBestScores = resultGetSocres.getScore();
			scoresAdapter = new AccountAdapter(getBaseContext(),
					R.layout.user_ranking_frikiados, listOfBestScores);
			listView.setAdapter(scoresAdapter);
			scoresAdapter.notifyDataSetChanged();
		}
	}

	public void showAlertDialogError() {
		// TODO Auto-generated method stub
		Context context = getApplicationContext();
		CharSequence text = "Error de conexión con el Servidor. Por favor pruebe más tarde!";
		int duration = Toast.LENGTH_SHORT;
		Toast toast = Toast.makeText(context, text, duration);
		toast.show();
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.ranking, menu);
		return true;
	}

	public void displayInterstitial() {
		if (interstitial.isLoaded()) {
			interstitial.show();
		} else {
		}
	}
	
	public class UpdateScore extends AsyncTask<Void, String, Void> {

		@Override
		protected void onPreExecute() {

		}

		@Override
		protected Void doInBackground(Void... unused) {
			HashMap<String, String> hashmap = sessionManager.getUserDetails();
			String idFacebook = hashmap.get(SessionManager.KEY_FB_USER_ID);
			String idUser = hashmap.get(SessionManager.KEY_ID_USER_FRIKIADOS);
			resultScore = RestfulWebService
					.sendScore(idUser, idFacebook,
							Integer.toString(sessionManager.getBestScore()),
							Integer.toString(sessionManager.getAnsweredQuestions()),
							getApplicationContext());
			return (null);
		}

		@Override
		protected void onPostExecute(Void unused) {

			switch (resultScore) {
			case 0:
				// NO HAY ERROR
				try {
					sessionManager.setBestScoreSendToServer(true);
					// goToTarget = false;
				} catch (Exception e) {
					// nothing
				}
				break;

			case 1:
				try {
					sessionManager.setBestScoreSendToServer(false);
					// goToTarget = false;
				} catch (Exception e) {
					// nothing
				}
				// ERROR WEBSERVICE
				System.out.println("Error WebService");
				break;

			case 2:
				// ERROREXCEPTION
				try {
					sessionManager.setBestScoreSendToServer(false);
					// goToTarget = false;
				} catch (Exception e) {
					// nothing
				}
				System.out.println("Error Exception");

				break;

			default:
				break;
			}

		}

	}

	public void onStop() {
		GoogleAnalytics.getInstance(this).reportActivityStop(this);
		super.onStop();
	}

}
