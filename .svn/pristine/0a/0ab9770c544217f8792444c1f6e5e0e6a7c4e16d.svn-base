package com.appyuken.model;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;

import com.appyuken.frikiados.classes.FileHelper;
import com.appyuken.frikiados.classes.Question;
import com.appyuken.frikiados.classes.SessionManager;

import android.content.ContentValues;
import android.content.Context;
import android.content.ContextWrapper;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

public class QuestionDAO extends SQLiteOpenHelper  {
	
	   private static String DB_DIR = "/data/data/com.appyuken.frikiados/databases/";
	   private static String DB_NAME = "frikiados.sqlite";
	   private static String TABLE_NAME = "QUESTION";
	   private static String DB_PATH = DB_DIR + DB_NAME;
	   private static String OLD_DB_PATH = DB_DIR + "old_" + DB_NAME;
	   private static final int DATABASE_VERSION = 1;
	   private static final String KEY_ID = "id";

	   private final Context myContext;

	   private boolean createDatabase = false;
	   private boolean upgradeDatabase = false;
	   private SessionManager sessionManager;

	   /**
	    * Constructor Takes and keeps a reference of the passed context in order to
	    * access to the application assets and resources.
	    * 
	    * @param context
	    */
	   public QuestionDAO(Context context) {
	       super(context, DB_NAME, null, DATABASE_VERSION);
	       myContext = context;
	       // Get the path of the database that is based on the context.
	       DB_PATH = myContext.getDatabasePath(DB_NAME).getAbsolutePath();
	       sessionManager = new SessionManager(myContext);
	   }

	   /**
	    * Upgrade the database in internal storage if it exists but is not current. 
	    * Create a new empty database in internal storage if it does not exist.
	    */
	   public void initializeDataBase() {
	       /*
	        * Creates or updates the database in internal storage if it is needed
	        * before opening the database. In all cases opening the database copies
	        * the database in internal storage to the cache.
	        */
	       getWritableDatabase();
	       Log.e("Aquí enrtra", "vale");
	       
	       if(!doesDatabaseExist(myContext, "frikiados.sqlite")){
	       createDatabase = true;
	       
	       }else{
	    	   Log.e("La BBDD existe", "vale");
	    	   sessionManager.createBBDD();
	    	  
	       }
	       if (createDatabase) {
	           /*
	            * If the database is created by the copy method, then the creation
	            * code needs to go here. This method consists of copying the new
	            * database from assets into internal storage and then caching it.
	            */
	           try {
	               /*
	                * Write over the empty data that was created in internal
	                * storage with the one in assets and then cache it.
	                */
	        	   Log.e("copiar bbdd", "vale");
	        	   sessionManager.createBBDD();
	               copyDataBase();
	           } catch (IOException e) {
	               throw new Error("Error copying database");
	           }
	       } else if (upgradeDatabase) {
	           /*
	            * If the database is upgraded by the copy and reload method, then
	            * the upgrade code needs to go here. This method consists of
	            * renaming the old database in internal storage, create an empty
	            * new database in internal storage, copying the database from
	            * assets to the new database in internal storage, caching the new
	            * database from internal storage, loading the data from the old
	            * database into the new database in the cache and then deleting the
	            * old database from internal storage.
	            */
	    	   Log.e("Actualizar bbdd", "vale");
	           try {
	               FileHelper.copyFile(DB_PATH, OLD_DB_PATH);
	               copyDataBase();
	               SQLiteDatabase old_db = SQLiteDatabase.openDatabase(OLD_DB_PATH, null, SQLiteDatabase.OPEN_READWRITE);
	               SQLiteDatabase new_db = SQLiteDatabase.openDatabase(DB_PATH,null, SQLiteDatabase.OPEN_READWRITE);
	               /*
	                * Add code to load data into the new database from the old
	                * database and then delete the old database from internal
	                * storage after all data has been transferred.
	                */
	           } catch (IOException e) {
	               throw new Error("Error copying database");
	           }
	       }

	   }

	   /**
	    * Copies your database from your local assets-folder to the just created
	    * empty database in the system folder, from where it can be accessed and
	    * handled. This is done by transfering bytestream.
	    * */
	   private void copyDataBase() throws IOException {
	       /*
	        * Close SQLiteOpenHelper so it will commit the created empty database
	        * to internal storage.
	        */
		   Log.e("Copiando BBDD", "copiando");
	       close();

	       /*
	        * Open the database in the assets folder as the input stream.
	        */
	       InputStream myInput = myContext.getAssets().open(DB_NAME);

	       /*
	        * Open the empty db in interal storage as the output stream.
	        */
	       OutputStream myOutput = new FileOutputStream(DB_PATH);

	       /*
	        * Copy over the empty db in internal storage with the database in the
	        * assets folder.
	        */
	       FileHelper.copyFile(myInput, myOutput);

	       /*
	        * Access the copied database so SQLiteHelper will cache it and mark it
	        * as created.
	        */
	       getWritableDatabase().close();
	   }

	   /*
	    * This is where the creation of tables and the initial population of the
	    * tables should happen, if a database is being created from scratch instead
	    * of being copied from the application package assets. Copying a database
	    * from the application package assets to internal storage inside this
	    * method will result in a corrupted database.
	    * <P>
	    * NOTE: This method is normally only called when a database has not already
	    * been created. When the database has been copied, then this method is
	    * called the first time a reference to the database is retrieved after the
	    * database is copied since the database last cached by SQLiteOpenHelper is
	    * different than the database in internal storage.
	    */
	   @Override
	   public void onCreate(SQLiteDatabase db) {
	       /*
	        * Signal that a new database needs to be copied. The copy process must
	        * be performed after the database in the cache has been closed causing
	        * it to be committed to internal storage. Otherwise the database in
	        * internal storage will not have the same creation timestamp as the one
	        * in the cache causing the database in internal storage to be marked as
	        * corrupted.
	        */
	       createDatabase = true;

	       /*
	        * This will create by reading a sql file and executing the commands in
	        * it.
	        */
	           // try {
	           // InputStream is = myContext.getResources().getAssets().open(
	           // "create_database.sql");
	           //
	           // String[] statements = FileHelper.parseSqlFile(is);
	           //
	           // for (String statement : statements) {
	           // db.execSQL(statement);
	           // }
	           // } catch (Exception ex) {
	           // ex.printStackTrace();
	           // }
	   }

	   /**
	    * Called only if version number was changed and the database has already
	    * been created. Copying a database from the application package assets to
	    * the internal data system inside this method will result in a corrupted
	    * database in the internal data system.
	    */
	   @Override
	   public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
	       /*
	        * Signal that the database needs to be upgraded for the copy method of
	        * creation. The copy process must be performed after the database has
	        * been opened or the database will be corrupted.
	        */
	       upgradeDatabase = true;

	       /*
	        * Code to update the database via execution of sql statements goes
	        * here.
	        */

	       /*
	        * This will upgrade by reading a sql file and executing the commands in
	        * it.
	        */
	       // try {
	       // InputStream is = myContext.getResources().getAssets().open(
	       // "upgrade_database.sql");
	       //
	       // String[] statements = FileHelper.parseSqlFile(is);
	       //
	       // for (String statement : statements) {
	       // db.execSQL(statement);
	       // }
	       // } catch (Exception ex) {
	       // ex.printStackTrace();
	       // }
	   }

	   /**
	    * Called everytime the database is opened by getReadableDatabase or
	    * getWritableDatabase. This is called after onCreate or onUpgrade is
	    * called.
	    */
	   @Override
	   public void onOpen(SQLiteDatabase db) {
	       super.onOpen(db);
	   }
	
	public ArrayList<Question> obtenerPreguntas(int numeroPreguntas)
	{
		ArrayList<Question> listaPreguntas = new ArrayList<Question>(numeroPreguntas);
		
		//Aquí va toda la lógica de BBDD sqlite para acceder a la bd y obtener las x preguntas (numeroPreguntas)
		 // 1. build the query
        String query = "SELECT t1.id, t1.questionText, t1.answer1, t1.answer2, t1.answer3, t1.correctAnswer, t1.timesAppeared," +
        		" t1.genre, t1.difficulty FROM QUESTION t1 INNER JOIN (SELECT id, MIN(timesAppeared) minTimesAppeared " +
        		"FROM QUESTION GROUP BY id)tbl1 ON tbl1.id=t1.id WHERE tbl1.minTimesAppeared=t1.timesAppeared LIMIT " + numeroPreguntas;
 
        // 2. get reference to writable DB
        SQLiteDatabase db = this.getWritableDatabase();
        Cursor cursor = db.rawQuery(query, null);
 
        // 3. go over each row, build book and add it to list
        Question question = null;
        if (cursor.moveToFirst()) {
            do {
            	question = new Question();
            	question.setQuestionId(Integer.parseInt(cursor.getString(0)));
            	question.setQuestionText(cursor.getString(1));
            	question.setAnswer1(cursor.getString(2));
            	question.setAnswer2(cursor.getString(3));
            	question.setAnswer3(cursor.getString(4));
            	question.setCorrectAnswer(Integer.parseInt(cursor.getString(5)));
            	question.setTimesAppeared(Integer.parseInt(cursor.getString(6)));
            	question.setGenre(cursor.getString(7));
            	question.setDifficulty(Integer.parseInt(cursor.getString(8)));
            	Log.d("Pregunta", "texto: " + cursor.getString(1) );
            	Log.d("Respeusta 1", "texto: " + cursor.getString(2) );
            	Log.d("Respeusta 2", "texto: " + cursor.getString(3) );
            	Log.d("Respeusta 3", "texto: " + cursor.getString(4) );
            	
            	
                // Add quetions to listofquestions
            	listaPreguntas.add(question);
            } while (cursor.moveToNext());
        }
 
       // Log.d("getAllNotis()", listaPreguntas.toString());
 
		
		
		
		return listaPreguntas;
	}
	public boolean doesDatabaseExist(Context context, String dbName) {
	    File dbFile = context.getDatabasePath(dbName);
	    return dbFile.exists();
	}

	public void saveTimesAppeared(ArrayList<ResumeLevel> resumeLevel) {
		// TODO Auto-generated method stub
		 // 1. get reference to writable DB
        SQLiteDatabase db = this.getWritableDatabase();
 
        // 2. create ContentValues to add key "column"/value
        
    	for (ResumeLevel resumeLeve : resumeLevel) {
    		ContentValues values = new ContentValues();
            values.put("timesAppeared", resumeLeve.getTimesAppeared()+1); // get title 
            
            // 3. updating row
            int i = db.update(TABLE_NAME, //table
                    values, // column/value
                    KEY_ID+" = ?", // selections
                    new String[] { String.valueOf(resumeLeve.getQuestionId()) });
		}
         //selection args
 
        // 4. close
        db.close();
		
		
	}

	public ArrayList<Question> obtenerPreguntasBoss(int numeroPreguntas) {
		// TODO Auto-generated method stub
	ArrayList<Question> listaPreguntas = new ArrayList<Question>(numeroPreguntas);
		
		//Aquí va toda la lógica de BBDD sqlite para acceder a la bd y obtener las x preguntas (numeroPreguntas)
		 // 1. build the query
        String query = "SELECT t1.id, t1.questionText, t1.answer1, t1.answer2, t1.answer3, t1.correctAnswer, t1.timesAppeared," +
        		" t1.genre, t1.difficulty FROM QUESTION t1 INNER JOIN (SELECT id, MIN(timesAppeared) minTimesAppeared " +
        		"FROM QUESTION GROUP BY id)tbl1 ON tbl1.id=t1.id WHERE tbl1.minTimesAppeared=t1.timesAppeared LIMIT " + numeroPreguntas;
 
        // 2. get reference to writable DB
        SQLiteDatabase db = this.getWritableDatabase();
        Cursor cursor = db.rawQuery(query, null);
 
        // 3. go over each row, build book and add it to list
        Question question = null;
        if (cursor.moveToFirst()) {
            do {
            	question = new Question();
            	question.setQuestionId(Integer.parseInt(cursor.getString(0)));
            	question.setQuestionText(cursor.getString(1));
            	question.setAnswer1(cursor.getString(2));
            	question.setAnswer2(cursor.getString(3));
            	question.setAnswer3(cursor.getString(4));
            	question.setCorrectAnswer(Integer.parseInt(cursor.getString(5)));
            	question.setTimesAppeared(Integer.parseInt(cursor.getString(6)));
            	question.setGenre(cursor.getString(7));
            	question.setDifficulty(Integer.parseInt(cursor.getString(8)));
            	Log.d("Pregunta", "texto: " + cursor.getString(1) );
            	Log.d("Respeusta 1", "texto: " + cursor.getString(2) );
            	Log.d("Respeusta 2", "texto: " + cursor.getString(3) );
            	Log.d("Respeusta 3", "texto: " + cursor.getString(4) );
            	
            	
                // Add quetions to listofquestions
            	listaPreguntas.add(question);
            } while (cursor.moveToNext());
        }
 
       // Log.d("getAllNotis()", listaPreguntas.toString());
 
		
		
		
		return listaPreguntas;
	}
}
